#include <pch.hpp>
#include <Vksb/Component/Control.hpp>
#include <Vksb/Component/Transform3d.hpp>
#include <Vksb/Configuration.hpp>


// ------------------------------------------------------------------ *structors

///////////////////////////////////////////////////////////////////////////
::vksb::component::Control::Control(
    bool ableToFly
)
    : m_ableToFly{ ableToFly }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Speed
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::getSpeed() const
    -> float
{
    return m_moveSpeed;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::setSpeed(
    float speed
)
{
    m_moveSpeed = speed;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingForward()
{
    m_movementState[Control::MovementState::forward] = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingBackward()
{
    m_movementState[Control::MovementState::backward] = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingRight()
{
    m_movementState[Control::MovementState::right] = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingLeft()
{
    m_movementState[Control::MovementState::left] = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingUp()
{
    m_movementState[Control::MovementState::up] = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::startMovingDown()
{
    m_movementState[Control::MovementState::down] = true;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Stop moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingForward()
{
    m_movementState[Control::MovementState::forward] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingBackward()
{
    m_movementState[Control::MovementState::backward] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingRight()
{
    m_movementState[Control::MovementState::right] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingLeft()
{
    m_movementState[Control::MovementState::left] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingUp()
{
    m_movementState[Control::MovementState::up] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMovingDown()
{
    m_movementState[Control::MovementState::down] = false;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::stopMoving()
{
    m_movementState.reset();
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::immobilize()
{
    m_movementState.reset();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Check if moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingForward() const
    -> bool
{
    return m_movementState.test(Control::MovementState::forward);
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingBackward() const
    -> bool
{
    return m_movementState.test(Control::MovementState::backward);
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingRight() const
    -> bool
{
    return m_movementState.test(Control::MovementState::right);
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingLeft() const
    -> bool
{
    return m_movementState.test(Control::MovementState::left);
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingUp() const
    -> bool
{
    return m_movementState.test(Control::MovementState::up);
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isMovingDown() const
    -> bool
{
    return m_movementState.test(Control::MovementState::down);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rotation
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::rotate(
    const ::glm::vec3& offset
)
{
    this->rotate(offset.x, offset.y, offset.z);
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::rotate(
    const float rotationOffsetX,
    const float rotationOffsetY,
    const float rotationOffsetZ
)
{
    this->rotateX(rotationOffsetX);
    this->rotateY(rotationOffsetY);
    this->rotateZ(rotationOffsetZ);
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::rotateX(
    const float offset
)
{
    m_rotation.x += offset * ::vksb::configuration.sensitivity.x;
    m_isRotated = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::rotateY(
    const float offset
)
{
    m_rotation.y += offset * ::vksb::configuration.sensitivity.y;
    if (m_rotation.y > ::vksb::configuration.maxPitch) {
        m_rotation.y = ::vksb::configuration.maxPitch;
    } else if (m_rotation.y < ::vksb::configuration.minPitch) {
        m_rotation.y = ::vksb::configuration.minPitch;
    }
    m_isRotated = true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::rotateZ(
    const float offset
)
{
    m_rotation.y += offset * ::vksb::configuration.sensitivity.z;
    m_isRotated = true;
}

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::vksb::component::Control::isRotated() const
    -> bool
{
    return m_isRotated;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::component::Control::resetRotatedFlag()
{
    m_isRotated = false;
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::getRotation() const
    -> const ::glm::vec3&
{
    return m_rotation;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Others
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::vksb::component::Control::isAbleToFly() const
    -> bool
{
    return m_ableToFly;
}
