#pragma once

namespace vksb {

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] static inline auto errorToString(
    ::VkResult result
) -> ::std::string
{
    const ::std::map<::VkResult, ::std::string> map{
        { VK_SUCCESS, "VK_SUCCESS"s },
        { VK_NOT_READY, "VK_NOT_READY"s },
        { VK_TIMEOUT, "VK_TIMEOUT"s },
        { VK_EVENT_SET, "VK_EVENT_SET"s },
        { VK_EVENT_RESET, "VK_EVENT_RESET"s },
        { VK_INCOMPLETE, "VK_INCOMPLETE"s },
        { VK_ERROR_OUT_OF_HOST_MEMORY, "VK_ERROR_OUT_OF_HOST_MEMORY"s },
        { VK_ERROR_OUT_OF_DEVICE_MEMORY, "VK_ERROR_OUT_OF_DEVICE_MEMORY"s },
        { VK_ERROR_INITIALIZATION_FAILED, "VK_ERROR_INITIALIZATION_FAILED"s },
        { VK_ERROR_DEVICE_LOST, "VK_ERROR_DEVICE_LOST"s },
        { VK_ERROR_MEMORY_MAP_FAILED, "VK_ERROR_MEMORY_MAP_FAILED"s },
        { VK_ERROR_LAYER_NOT_PRESENT, "VK_ERROR_LAYER_NOT_PRESENT"s },
        { VK_ERROR_EXTENSION_NOT_PRESENT, "VK_ERROR_EXTENSION_NOT_PRESENT"s },
        { VK_ERROR_FEATURE_NOT_PRESENT, "VK_ERROR_FEATURE_NOT_PRESENT"s },
        { VK_ERROR_INCOMPATIBLE_DRIVER, "VK_ERROR_INCOMPATIBLE_DRIVER"s },
        { VK_ERROR_TOO_MANY_OBJECTS, "VK_ERROR_TOO_MANY_OBJECTS"s },
        { VK_ERROR_FORMAT_NOT_SUPPORTED, "VK_ERROR_FORMAT_NOT_SUPPORTED"s },
        { VK_ERROR_FRAGMENTED_POOL, "VK_ERROR_FRAGMENTED_POOL"s },
        { VK_ERROR_UNKNOWN, "VK_ERROR_UNKNOWN"s },
        { VK_ERROR_OUT_OF_POOL_MEMORY, "VK_ERROR_OUT_OF_POOL_MEMORY"s },
        { VK_ERROR_INVALID_EXTERNAL_HANDLE, "VK_ERROR_INVALID_EXTERNAL_HANDLE"s },
        { VK_ERROR_FRAGMENTATION, "VK_ERROR_FRAGMENTATION"s },
        { VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"s },
        { VK_PIPELINE_COMPILE_REQUIRED, "VK_PIPELINE_COMPILE_REQUIRED"s },
        { VK_ERROR_SURFACE_LOST_KHR, "VK_ERROR_SURFACE_LOST_KHR"s },
        { VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"s },
        { VK_SUBOPTIMAL_KHR, "VK_SUBOPTIMAL_KHR"s },
        { VK_ERROR_OUT_OF_DATE_KHR, "VK_ERROR_OUT_OF_DATE_KHR"s },
        { VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"s },
        { VK_ERROR_VALIDATION_FAILED_EXT, "VK_ERROR_VALIDATION_FAILED_EXT"s },
        { VK_ERROR_INVALID_SHADER_NV, "VK_ERROR_INVALID_SHADER_NV"s },
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR"s },
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR"s },
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR"s },
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR"s },
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"s },
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
        { VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"s },
#endif
        { VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"s },
        { VK_ERROR_NOT_PERMITTED_KHR, "VK_ERROR_NOT_PERMITTED_KHR"s },
        { VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"s },
        { VK_THREAD_IDLE_KHR, "VK_THREAD_IDLE_KHR"s },
        { VK_THREAD_DONE_KHR, "VK_THREAD_DONE_KHR"s },
        { VK_OPERATION_DEFERRED_KHR, "VK_OPERATION_DEFERRED_KHR"s },
        { VK_OPERATION_NOT_DEFERRED_KHR, "VK_OPERATION_NOT_DEFERRED_KHR"s },
        { VK_ERROR_COMPRESSION_EXHAUSTED_EXT, "VK_ERROR_COMPRESSION_EXHAUSTED_EXT"s }
    };
    return map.at(result);
}

} // namespace vksb
