///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <AScene.hpp>
#include <Component/Control.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::vksb::AScene::AScene()
    : m_player{ m_registry.create() }
{
    m_camera.setViewDirection(::glm::vec3{ 0.0f }, ::glm::vec3{ 0.0f, 0.0f, 1.0f });
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::vksb::AScene::~AScene() = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters/Setters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::vksb::AScene::getWindow()
    -> ::vksb::Window&
{
    return m_window;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Basic
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::vksb::AScene::run()
{
    ::xrn::Clock m_clock;

    while (!m_window.shouldClose()) {
        m_window.handleEvents(*this);

        const auto dt{ m_clock.restart() };
        if (!this->onUpdate(dt) || !this->update(dt) || !this->postUpdate(dt)) {
            m_window.close();
            break;
        }

        this->draw();
        this->limitFrameRate(dt);
    }

    ::vkDeviceWaitIdle(m_device.device());
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::AScene::update(
    ::xrn::Time dt
) -> bool
{
    m_registry.view<::vksb::component::Transform3d, ::vksb::component::Control>().each(
        [dt](auto& transform, auto& control){
            control.updatePosition(dt, transform);
            control.updateRotation(transform);
        }
    );
    return true;
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::AScene::draw()
{
    const float aspect{ m_renderer.getAspectRatio() };
    // m_camera.setOrthographicProjection(-aspect, aspect, -1.0, 1.0, -1.0, 1.0);
    m_camera.setPerspectiveProjection(::glm::radians(50.0f), aspect, 0.1f, 10.0f);
    // m_camera.setViewTarget(
        // { 0.0f, 0.0f, 0.0f },
        // this->getPlayerComponent<::vksb::component::Transform3d>().getPosition()
    // );

    if (auto commandBuffer{ m_renderer.beginFrame() }) {
        m_renderer.beginSwapChainRenderPass(commandBuffer);

        auto projectionView{ m_camera.getProjection() * m_camera.getView() };
        m_registry.view<::vksb::component::Transform3d>().each(
            [&](auto& transform){
                m_renderSystem(commandBuffer, transform, projectionView);
            }
        );

        m_renderer.endSwapChainRenderPass(commandBuffer);
        m_renderer.endFrame();
    }
}

///////////////////////////////////////////////////////////////////////////
void ::vksb::AScene::limitFrameRate(
    ::xrn::Time dt
)
{
    auto t{ ::xrn::Time::createAsSeconds(1) / m_maxFrameRate };
    if (t > dt) {
        ::std::this_thread::sleep_for(::std::chrono::milliseconds(t - dt));
    }
}
