#pragma once

#include <Model.hpp>

namespace vksb {

///////////////////////////////////////////////////////////////////////////
/// \brief No clue what it does xD
/// \ingroup vulkan
///
/// \include GameObject.hpp <GameObject.hpp>
///
///////////////////////////////////////////////////////////////////////////
class GameObject {

public:

    struct Transform2dComponent {
        ::glm::vec2 translation;
        ::glm::vec2 scale{ 1.0f, 1.0f };
        float rotation{ 0.0f };

        [[ nodiscard ]] auto getMatrix() const
            -> ::glm::mat2
        {
            const float s{ ::glm::sin(this->rotation) };
            const float c{ ::glm::cos(this->rotation) };

            const ::glm::mat2 rotationMatrix{ {c, s}, { -s, c } };
            const ::glm::mat2 scaleMatrix{ { this->scale.x, 0.0f }, { 0.0f, this->scale.y } };

            return rotationMatrix * scaleMatrix;
        }
    };

    struct Transform3dComponent {
        ::glm::vec3 translation;
        ::glm::vec3 scale{ 1.0f, 1.0f, 1.0f };
        ::glm::vec3 rotation{};

        [[ nodiscard ]] auto getMatrix() const
            -> ::glm::mat4
        {
            const float c3 = glm::cos(rotation.z);
            const float s3 = glm::sin(rotation.z);
            const float c2 = glm::cos(rotation.x);
            const float s2 = glm::sin(rotation.x);
            const float c1 = glm::cos(rotation.y);
            const float s1 = glm::sin(rotation.y);
            return glm::mat4{
                {
                    scale.x * (c1 * c3 + s1 * s2 * s3),
                    scale.x * (c2 * s3),
                    scale.x * (c1 * s2 * s3 - c3 * s1),
                    0.0f,
                },
                {
                    scale.y * (c3 * s1 * s2 - c1 * s3),
                    scale.y * (c2 * c3),
                    scale.y * (c1 * c3 * s2 + s1 * s3),
                    0.0f,
                },
                {
                    scale.z * (c2 * s1),
                    scale.z * (-s2),
                    scale.z * (c1 * c2),
                    0.0f,
                },
                {translation.x, translation.y, translation.z, 1.0f}
            };
        }
    };

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit GameObject(
        ::std::shared_ptr<::vksb::Model> model
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~GameObject();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    GameObject(
        const GameObject&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const GameObject&
    ) noexcept
        -> GameObject& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    GameObject(
        GameObject&&
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        GameObject&&
    ) noexcept
        -> GameObject&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters/setters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getId() const
        -> ::std::size_t;


    // GameObject::Transform2dComponent transform{};
    GameObject::Transform3dComponent transform{};
    ::glm::vec3 color;
    ::std::shared_ptr<::vksb::Model> model;

private:

    static inline ::std::size_t idGiver{ 0 };
    ::std::size_t m_id{ ++idGiver };


};

} // namespace vksb

