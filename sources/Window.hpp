#pragma once

namespace vksb {

///////////////////////////////////////////////////////////////////////////
/// \brief Window wrapper for GLFW
/// \ingroup vulkan
///
/// \include Window.hpp <Window.hpp>
///
///////////////////////////////////////////////////////////////////////////
class Window {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // static elements
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Contains the size of the window
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Size {
        ::std::size_t width;
        ::std::size_t height;

        [[ nodiscard ]] operator VkExtent2D() const;
    };



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Window(
        bool isFullscreen = true,
        const ::std::string& windowName = Window::defaultName
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Window();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Window(
        const Window&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Window&
    ) noexcept
        -> Window& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Window(
        Window&&
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Window&&
    ) noexcept
        -> Window&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic operations
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks whether the window should be closed or not
    ///
    /// \return True if the function should be closed
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto shouldClose() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clears the content of the window
    ///
    /// Replace the content with the color of the clear.
    ///
    /// \see setClearColor()
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Display the content of the window
    ///
    ///////////////////////////////////////////////////////////////////////////
    void display() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Pull and resolve the events
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handleEvents();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Resizes the window
    ///
    ///////////////////////////////////////////////////////////////////////////
    void resize(
        const Window::Size& size
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Other
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the size of the window
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getSize() const
        -> const Window::Size&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Vulkan implementation
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Vulkan specific
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto createWindowSurface(
        ::VkInstance instance,
        ::VkSurfaceKHR* surface
    ) -> bool;



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // GLFW memory
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Window delete helper
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Deleter {
    public:
        void operator()(
            ::GLFWwindow* window
        );
    };



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    static constexpr const Window::Size defaultSize{ 1920uz, 1080uz };
    static constexpr const auto defaultName{ "MainWindow" };



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    Window::Size m_size;
    ::std::unique_ptr<::GLFWwindow, Window::Deleter> m_window;

    bool m_shouldClose{ false };

private:

    friend void framebufferResizeCallback(
        GLFWwindow* windowPtr,
        int width,
        int height
    );


};

} // namespace vksb
