#pragma once

namespace vksb { class Pipeline; }
namespace vksb { class Device; }

namespace vksb::shader {

///////////////////////////////////////////////////////////////////////////
/// \brief A basic glsl binary reader
/// \ingroup vulkan
///
/// \include Program.hpp <Shader/Program.hpp>
///
///////////////////////////////////////////////////////////////////////////
class Program {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Construct a program from the filenames
    ///
    /// The filenames will be concatenated to the default shader directory path
    /// as well as the fragment/vertex directory name and their respective
    /// extension.
    /// In case of error, a message will be wrote to ::std::cerr, but
    /// no error nor exception will be raised.
    ///
    /// \param filename Filename of both the vertex and the fragment file
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Program(
        const ::std::string& filename,
        ::vksb::Pipeline& pipeline
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Construct a program from the filenames
    ///
    /// The filenames will be concatenated to the default shader directory path
    /// as well as the fragment/vertex directory name and their respective
    /// extension.
    /// In case of error, a message will be wrote to ::std::cerr, but
    /// no error nor exception will be raised.
    ///
    /// \param vertexFilename   Filename of the vertex file
    /// \param fragmentFilename Filename of the fragment file
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Program(
        const ::std::string& vertexFilename,
        const ::std::string& fragmentFilename,
        ::vksb::Pipeline& pipeline
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Program();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Program(
        const Program&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Program&
    ) noexcept
        -> Program& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Program(
        Program&&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Program&&
    ) noexcept
        -> Program& = delete;



private:



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ::VkShaderModule m_vertexShaderModule;
    ::VkShaderModule m_fragmentShaderModule;

    ::vksb::Pipeline& m_pipeline;

};

} // namespace vksb::shader
