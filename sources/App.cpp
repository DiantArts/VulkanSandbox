///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <App.hpp>
#include <xrn/Util.hpp>
#include <Component/Control.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::vksb::App::App()
    : ::vksb::AScene::AScene{}
{
    this->loadObjects();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::vksb::App::~App() = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Overrides
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::vksb::App::onUpdate(
    ::xrn::Time dt
) -> bool
{
    return true;
}

///////////////////////////////////////////////////////////////////////////
auto ::vksb::App::postUpdate(
    ::xrn::Time dt
) -> bool
{
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Helpers
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::vksb::App::loadObjects()
{
    {
        ::vksb::component::Transform3d object;
        object.model = ::vksb::Model::createFromFile(m_device, "FlatVase");
        object.setPosition(-0.5f, 0.5f, 2.5f);
        object.setScale(3.0f, 1.5f, 3.0f);
        object.setRotationX(90.0f);
        m_registry.emplace<::vksb::component::Transform3d>(m_player, ::std::move(object));
        m_registry.emplace<::vksb::component::Control>(m_player);
    }
    {
        ::vksb::component::Transform3d object;
        object.model = ::vksb::Model::createFromFile(m_device, "SmoothVase");
        object.setPosition(0.5f, 0.5f, 2.5f);
        object.setScale(3.0f, 1.5f, 3.0f);
        m_registry.emplace<::vksb::component::Transform3d>(m_registry.create(), ::std::move(object));
    }
}
