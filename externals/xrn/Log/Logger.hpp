#pragma once

#include <fmt/format.h>
#include <fmt/color.h>

namespace xrn {

///////////////////////////////////////////////////////////////////////////
/// \brief Contains a function
///
/// \include Logger.hpp <Logger.hpp>
///
/// Output varies if NDEBUG (no debug) that disable asserts and PRINT_DEBUG
/// that prints "success" if the assert succeeded.
/// If FORCE_PRINT overrides silent actions (like SASSERT) and print on
/// success.
/// The logger level is optional;
/// The print format is the same as fmt (::std::format) library
///
/// \code cpp
/// XRN_ASSERT(true, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::none, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::success, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::note, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::info, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::trace, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::debug, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::warning, "Message");
/// XRN_ASSERT(true, ::xrn::Logger::Level::error, "Message");
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
class Logger {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // ErrorLevel
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Level of error to format the output
    ///
    /// The level should be used as followed:
    ///     - none: no extra output. Should be avoided
    ///     - note: user driven, configuration operations
    ///     - info: user driven, regularly scheduled operations
    ///     - trace: tracks potential bugs (disabled with NDEBUG)
    ///     - debug: (disabled with NDEBUG)
    ///     - warning: can potential become an error
    ///     - error: error that cannot be recovered but does not throw
    ///     - fatal: error that cannot be recovered, throws an exception
    ///     - fatalError: same as fatal
    ///
    /// \throws ::xrn::Exception fatal error
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum Level {
        none = 0, // no extra output. Should be avoided
        success, // is successful
        note, // user driven (configuration operations)
        info, // user driven (regularly scheduled operations)
        trace, // tracks potential bugs (disabled with NDEBUG)
        debug, // (disabled with NDEBUG)
        warning, // can potential become an error
        error, // error that cannot be recovered but does not throw
        fatal, // error that cannot be recovered, throws an exception
        fatalError // same as fatal
    };



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Logger() = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Log
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Logs using fmt
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void logImpl(
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Logs using fmt
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void logImpl(
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Assert
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Same as assert from <cassert>
    ///
    /// Prints successful asserts if PRINT_DEBUG is defined
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void assertImpl(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void assertImpl(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Silent Assert
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Same as assert from <cassert>
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void silentAssertImpl(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void silentAssertImpl(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Helper
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Outputs the message with the right format
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void outputLog(
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Assert and outputs the message with the right format if needed
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void outputAssert(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Assert and outputs the message with the right format if needed
    ///////////////////////////////////////////////////////////////////////////
    template <
        typename... Args
    > static void outputSilentAssert(
        bool condition,
        ::std::string_view filepath,
        ::std::string_view functionName,
        ::std::size_t lineNumber,
        Logger::Level level,
        ::fmt::format_string<Args...> subformat,
        Args&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Format date
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static inline auto getDate()
        -> ::std::string;
};

} // namespace xrn



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Macros
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Output logs
///////////////////////////////////////////////////////////////////////////
#define XRN_LOG(...) \
    ::xrn::Logger::logImpl(__FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)

///////////////////////////////////////////////////////////////////////////
/// \brief Throws a runtime_error with the right output
///////////////////////////////////////////////////////////////////////////
#define XRN_THROW(...) \
    ::xrn::Logger::logImpl(__FILE__, __FUNCTION__, __LINE__, ::xrn::Logger::Level::fatalError, __VA_ARGS__); \
    throw ::std::logic_error{ "exception shoulh have been already thrown" }

///////////////////////////////////////////////////////////////////////////
/// \brief Same as assert from <cassert>
///////////////////////////////////////////////////////////////////////////
#define XRN_ASSERT(condition, ...) \
    ::xrn::Logger::assertImpl((condition), __FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)

///////////////////////////////////////////////////////////////////////////
/// \brief Same as assert from XRN_ASSERT but does not print success
///////////////////////////////////////////////////////////////////////////
#define XRN_SASSERT(condition, ...) \
    ::xrn::Logger::silentAssertImpl((condition), __FILE__, __FUNCTION__, __LINE__, __VA_ARGS__)



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Header-implementation
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
#include "./Logger.impl.hpp"
