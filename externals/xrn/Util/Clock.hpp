#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Util/Time.hpp>



namespace xrn::util {

///////////////////////////////////////////////////////////////////////////
/// \brief Simplifies time measures
/// \ingroup util
///
/// \include Clock.hpp <xrn/Util/Clock.hpp>
///
/// ::xrn::util::BasicClock provide an high resolution clock allowing precise
/// elapsed time measures.
///
/// Usage example:
/// \code
/// ::xrn::Clock clock;
/// ...
/// ::xrn::Time time1{ clock.getElapsedTime() };
/// ...
/// ::xrn::Time time2{ clock.restart() };
/// \endcode
///
/// \see ::xrn::util::BasicTime
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> class BasicClock {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // static elements
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Type internally contained by the class
    ///
    ///////////////////////////////////////////////////////////////////////////
    using Type = T;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Constructs a clock and starts it automatically. The return types will
    /// be of the type given as template parameter. By default, the internal
    /// type is ::xrn::util::BasicTime.
    ///
    /// \see ::xrn::util::BasicTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit BasicClock() noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Restarts the clock
    ///
    /// Puts the time counter back to zero.
    ///
    ///////////////////////////////////////////////////////////////////////////
    void reset();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the time elapsed since the last reset
    ///
    /// Returns the time elapsed sine the last reset of the clock. The clock is
    /// reseted when constructed or when restart() or reset() is called.
    ///
    /// \param amount Time in milliseconds
    ///
    /// \see reset(), restart()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getElapsed()
        -> BasicClock<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Fusion between getElapsed() and reset()
    ///
    /// Puts the time counter back to zero returns the elapsed time since the
    /// last clock reset.
    ///
    /// \see getElapsed(), reset()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto restart()
        -> BasicClock<T>::Type;



private:

    ///////////////////////////////////////////////////////////////////////////
    // Time of the last clock reset (constructor, restart() or reset())
    ///////////////////////////////////////////////////////////////////////////
    ::std::chrono::time_point<std::chrono::high_resolution_clock> m_timePoint;

};

} // namespace xrn::ecs



///////////////////////////////////////////////////////////////////////////
// Template specialization
///////////////////////////////////////////////////////////////////////////
namespace xrn::util { using Clock = ::xrn::util::BasicClock<::xrn::Time>; }
namespace xrn { using Clock = ::xrn::util::Clock; }



///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <xrn/Util/Clock.impl.hpp>
